{"version":3,"sources":["components/VideoBox.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["VideoBox","props","className","id","count","onClick","removeBox","width","height","name","value","url","src","type","allowscriptaccess","allowfullscreen","Main","state","data","loading","numBox","children","addNewVideoBox","bind","this","setState","JSONResult","randomNum","Math","floor","random","length","randomHash","item","push","key","number","console","log","newState","index","findIndex","a","splice","load","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"s4DAEe,SAASA,EAASC,GAE7B,OAEI,yBAAKC,UAAU,uBAAuBC,GAAIF,EAAME,IAC5C,yBAAKD,UAAU,OACX,yBAAKA,UAAU,wBACX,uBAAGA,UAAW,mBAAqBD,EAAMC,WAAzC,SAA2DD,EAAMG,QAGrE,yBAAKF,UAAU,wBACX,4BAAQA,UAAU,mBAAmBG,QAAS,kBAAMJ,EAAMK,UAAUL,EAAME,MAA1E,OAcR,4BAAQI,MAAM,MAAMC,OAAO,OACvB,2BACIC,KAAK,QACLC,MAAO,mCAAqCT,EAAMU,IAAM,oBAC5D,2BAAOF,KAAK,kBAAkBC,MAAM,SACpC,2BAAOD,KAAK,oBAAoBC,MAAM,WACtC,2BACIE,IAAK,mCAAqCX,EAAMU,IAAM,kBACtDE,KAAK,gCACLN,MAAM,MACNC,OAAO,MACPM,kBAAkB,SAClBC,gBAAgB,W,WCsGrBC,EAxIf,kDAEI,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDgB,MAAQ,CACTC,KAAM,GACNC,SAAS,EACTC,OAAQ,GACRC,SAAU,IAEd,EAAKC,eAAiB,EACjBA,eACAC,KAFiB,gBARP,EAFvB,gEAgBQC,KAAKC,SAAS,CACVP,KAAMQ,EACNP,SAAS,MAlBrB,uCAqCsB,IACPD,EAAQM,KAAKP,MAAbC,KACPM,KAAKC,SAAS,CACVL,OAAQI,KAAKP,MAAMG,OAAS,IAEhC,IAAMO,EAAYC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAKa,QAC5CC,EAAaJ,KAAKC,MAAsB,GAAhBD,KAAKE,UAC/BG,EAAOf,EAAKS,GAChB,GAAIM,EAAI,MAAY,EAAG,CACnBf,EAAKS,GAAL,MAA2BT,EAAKS,GAAL,MAA2B,EACtDT,EAAKS,GAAL,GAAwBT,EAAKS,GAAL,MAA2BT,EAAKS,GAAL,IACnD,IAAIzB,EAAY,gBACiB,IAA7BgB,EAAKS,GAAL,OAA+D,IAA7BT,EAAKS,GAAL,QAClCzB,EAAY,iBAEiB,IAA7BgB,EAAKS,GAAL,OAA+D,IAA7BT,EAAKS,GAAL,QAClCzB,EAAY,iBAEiB,IAA7BgB,EAAKS,GAAL,QACAzB,EAAY,gBAEhBsB,KACKP,MACAI,SACAa,KAAK,kBAAClC,EAAD,CACFmC,IAAKF,EAAI,IAAUD,EACnBI,OAAQT,EACRhB,IAAKsB,EAAI,IACT9B,GAAIe,EAAKS,GAAL,GACJvB,MAAO6B,EAAI,MACX/B,UAAWA,EACXI,UAAWkB,KACVlB,UACAiB,KAAKC,SAElBa,QAAQC,IAAI,IAAKd,KAAKP,MAAMC,QAxEpC,gCA0Ecf,GACNkC,QAAQC,IAAI,cAAenC,GAC3B,IAAMoC,EAAWf,KAAKP,MAChBuB,EAAQD,EACTlB,SACAoB,WAAU,SAAAC,GAAC,OAAIA,EAAEzC,MAAME,KAAOA,KACnCkC,QAAQC,IAAIE,IACG,IAAXA,IAEJD,EACKlB,SACAsB,OAAOH,EAAO,GAEnBhB,KAAKC,SAASc,GACdF,QAAQC,IAAI,IAAKd,KAAKP,MAAMC,SAxFpC,6EA2Fc,IAGF0B,GAAO,EAIX,OANkBpB,KAAKP,MAAhBE,UAIHyB,GAAO,GAGP,6BAGI,yBAAK1C,UAAU,qDACX,uBAAGA,UAAU,gBAAgB2C,KAAK,KAAI,0BAAM3C,UAAU,eAAhB,uBACtC,4BACIA,UAAU,iBACVW,KAAK,SACLiC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBACX,0BAAMhD,UAAU,0BAMxB,yBAAKA,UAAU,6BACX,uBAAGA,UAAU,iDAAiDG,QAASmB,KAAKF,gBAA5E,WAGA,yBAAKpB,UAAU,OACT0C,EAEI,2CADApB,KAAKP,MAAMI,UAGrB,uBAAGnB,UAAU,iDAAiDG,QAASmB,KAAKF,gBAA5E,iBA/HpB,GAA0B6B,aCOXC,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCKcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.c3c4afc9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function VideoBox(props) {\r\n\r\n    return (\r\n\r\n        <div className=\"col-sm col-md-3 py-3\" id={props.id}>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                    <p className={\"badge badge-pill\" + props.className}>Count {props.count}\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                    <button className=\"badge badge-pill\" onClick={() => props.removeBox(props.id)}>X</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <iframe\r\n            width=\"250\"\r\n            height=\"175\"\r\n            src={\"https://www.youtube.com/embed/\"+props.url+\"?mute=1&vq=tiny\"}\r\n            // srcDoc={\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/\"+props.url+\"?mute=1><img src=https://img.youtube.com/vi/\"+props.url+\"/hqdefault.jpg alt='Video The Dark Knight Rises: What Went Wrong? – Wisecrack Edition'><span>▶</span></a>\"}\r\n            //  frameBorder=\"0\"\r\n            //  allowFullScreen\r\n            >\r\n\r\n            </iframe> */}\r\n            <object width=\"250\" height=\"175\">\r\n                <param\r\n                    name=\"movie\"\r\n                    value={\"https://www.youtube.com/watch?v=\" + props.url + \"?mute=1&vq=tiny\"}></param>\r\n                <param name=\"allowFullScreen\" value=\"true\"></param>\r\n                <param name=\"allowscriptaccess\" value=\"always\"></param>\r\n                <embed\r\n                    src={\"https://www.youtube.com/watch?v=\" + props.url + \"?mute=1&vq=tiny\"}\r\n                    type=\"application/x-shockwave-flash\"\r\n                    width=\"420\"\r\n                    height=\"315\"\r\n                    allowscriptaccess=\"always\"\r\n                    allowfullscreen=\"true\"></embed>\r\n            </object>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport VideoBox from '../components/VideoBox';\r\n// import JSONResult from '../data/test.json';\r\nimport JSONResult from '../data/initial.json';\r\n\r\nexport class Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            numBox: 12,\r\n            children: []\r\n        }\r\n        this.addNewVideoBox = this\r\n            .addNewVideoBox\r\n            .bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            data: JSONResult, \r\n            loading: false\r\n        })\r\n    }\r\n\r\n    // Old\r\n    // componentDidMount() {\r\n       \r\n    //     fetch('./data/initial.json', {\r\n       \r\n    //         headers: {\r\n    //             'Content-Type': 'application/json',\r\n    //             'Accept': 'application/json'\r\n    //         }\r\n\r\n    //     }).then((response) => response.json()).then((messages) => {\r\n    //         this.setState({data: messages, loading: false})\r\n    //         console.log(\"messages\", messages);\r\n    //     });\r\n    // }\r\n    addNewVideoBox() {\r\n        const {data} = this.state;\r\n        this.setState({\r\n            numBox: this.state.numBox + 1\r\n        });\r\n        const randomNum = Math.floor(Math.random() * data.length);\r\n        const randomHash = Math.floor(Math.random() * 25);\r\n        let item = data[randomNum];\r\n        if (item[\"count\"] < 5) {\r\n            data[randomNum][\"count\"] = data[randomNum][\"count\"] + 1;\r\n            data[randomNum][\"id\"] = data[randomNum][\"count\"] + data[randomNum][\"url\"]\r\n            let className = 'badge-success'\r\n            if (data[randomNum][\"count\"] === 1 || data[randomNum][\"count\"] === 2) {\r\n                className = 'badge-success'\r\n            }\r\n            if (data[randomNum][\"count\"] === 3 || data[randomNum][\"count\"] === 4) {\r\n                className = 'badge-warning'\r\n            }\r\n            if (data[randomNum][\"count\"] === 5) {\r\n                className = 'badge-danger'\r\n            }\r\n            this\r\n                .state\r\n                .children\r\n                .push(<VideoBox\r\n                    key={item[\"url\"] + randomHash}\r\n                    number={randomNum}\r\n                    url={item[\"url\"]}\r\n                    id={data[randomNum][\"id\"]}\r\n                    count={item[\"count\"]}\r\n                    className={className}\r\n                    removeBox={this\r\n                    .removeBox\r\n                    .bind(this)}/>);\r\n        }\r\n        console.log('c', this.state.data)\r\n    }\r\n    removeBox(id) {\r\n        console.log('remove box ', id)\r\n        const newState = this.state;\r\n        const index = newState\r\n            .children\r\n            .findIndex(a => a.props.id === id);\r\n        console.log(index)\r\n        if (index === -1) \r\n            return;\r\n        newState\r\n            .children\r\n            .splice(index, 1);\r\n\r\n        this.setState(newState)\r\n        console.log('d', this.state.data)\r\n    }\r\n    removeLocalStorage() {}\r\n    render() {\r\n        const {loading} = this.state;\r\n\r\n        let load = true;\r\n        if (!loading) {\r\n            load = false;\r\n        }\r\n        return (\r\n            <div>\r\n                {/* <Header /> */}\r\n\r\n                <nav className=\"navbar navbar-expand-lg  navbar-dark bg-dark mb-5\">\r\n                    <a className=\"navbar-brand \" href=\"#\"><span className=\"text-center\">  ut-Access v-1.01</span></a>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNav\"\r\n                        aria-controls=\"navbarNav\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                </nav>\r\n\r\n                {/* container */}\r\n                <div className=\"container-fluid py-5 mx-3\">\r\n                    <a className=\"text-center btn btn-dark my-4 btn-lg btn-block\" onClick={this.addNewVideoBox}>Add Box\r\n                    </a>\r\n                    {/* {this.state.children.length ===0 ? <h1>Click on Add Box</h1>:<React.Fragment></React.Fragment>} */}\r\n                    <div className=\"row\">\r\n                        {!load\r\n                            ? this.state.children\r\n                            : <p>getting data</p>}\r\n                    </div>\r\n                    <a className=\"text-center btn btn-dark my-4 btn-lg btn-block\" onClick={this.addNewVideoBox}>Add Box\r\n                    </a>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}