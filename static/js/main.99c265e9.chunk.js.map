{"version":3,"sources":["components/VideoBox.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["VideoBox","props","className","id","count","onClick","removeBox","width","height","src","url","srcDoc","frameBorder","allow","allowFullScreen","Main","state","data","loading","numBox","children","addNewVideoBox","bind","fetch","headers","then","response","json","messages","setState","console","log","this","randomNum","Math","floor","random","length","randomHash","item","push","key","number","newState","index","findIndex","a","splice","load","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","removeLocalStorage","Fragment","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99c265e9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function VideoBox(props) {\r\n   \r\n    return (\r\n        \r\n        <div className=\"col-sm col-md-3 py-3\" id={props.id}>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                     <p className={\"badge \"+props.className}>Count {props.count} </p>\r\n                </div>\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                     <button className=\"btn btn-dark btn-sm btn-round\" onClick={()=>props.removeBox(props.id)}>X</button>\r\n                </div>\r\n            </div>\r\n            \r\n            <iframe\r\n            width=\"250\"\r\n            height=\"175\"\r\n            src={\"https://www.youtube.com/embed/\"+props.url}\r\n            srcDoc={\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/\"+props.url+\"?autoplay=1><img src=https://img.youtube.com/vi/\"+props.url+\"/hqdefault.jpg alt='Video The Dark Knight Rises: What Went Wrong? – Wisecrack Edition'><span>▶</span></a>\"}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen \r\n            >\r\n\r\n            </iframe>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport Header from './Header';\r\nimport VideoBox from '../components/VideoBox';\r\n\r\nexport class Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            numBox: 12,\r\n            children:[]\r\n        }\r\n        this.addNewVideoBox = this\r\n            .addNewVideoBox\r\n            .bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch('./data/initial.json', {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            }\r\n\r\n        }).then((response) => response.json()).then((messages) => {\r\n            this.setState({data: messages, loading: false})\r\n            console.log(\"messages\", messages);\r\n        });\r\n    }\r\n    addNewVideoBox() {\r\n        const {data} = this.state;\r\n        this.setState({\r\n            numBox: this.state.numBox + 1\r\n        });\r\n        const randomNum = Math.floor(Math.random() * data.length);\r\n        const randomHash = Math.floor(Math.random() * 25);\r\n                let item = data[randomNum];\r\n                if (item[\"count\"] < 5) {\r\n                    data[randomNum][\"count\"] = data[randomNum][\"count\"] + 1;\r\n                    data[randomNum][\"id\"] = data[randomNum][\"count\"]+data[randomNum][\"url\"]\r\n                    let className = 'badge-success'\r\n                    if (data[randomNum][\"count\"] == 1 || data[randomNum][\"count\"] == 2) {\r\n                        className = 'badge-success'\r\n                    }\r\n                    if (data[randomNum][\"count\"] == 3 || data[randomNum][\"count\"] == 4) {\r\n                        className = 'badge-warning'\r\n                    }\r\n                    if (data[randomNum][\"count\"] == 5) {\r\n                        className = 'badge-danger'\r\n                    }\r\n                    this.state.children.push(<VideoBox\r\n                        key={item[\"url\"]+randomHash}\r\n                        number={randomNum}\r\n                        url={item[\"url\"]}\r\n                        id={data[randomNum][\"id\"]}\r\n                        count={item[\"count\"]}\r\n                        className={className}\r\n                        removeBox={this.removeBox.bind(this)}/>);\r\n                }\r\n                console.log('c',this.state.children)\r\n    }\r\n    removeBox (id) {\r\n        console.log('remove box ',id)\r\n        const newState = this.state;\r\n        const index = newState.children.findIndex(a => a.props.id === id);\r\n        console.log(index)\r\n        if (index === -1) return;\r\n        newState.children.splice(index, 1);\r\n    \r\n        this.setState(newState)\r\n    }\r\n    removeLocalStorage() {}\r\n    render() {\r\n        const { loading} = this.state;\r\n       \r\n        let load = true;\r\n        if (!loading) {\r\n            load = false;\r\n        } \r\n        return (\r\n            <div>\r\n                {/* <Header /> */}\r\n\r\n                <nav className=\"navbar navbar-expand-lg  navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">ut-Access</a>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNav\"\r\n                        aria-controls=\"navbarNav\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                        <ul className=\"navbar-nav\">\r\n\r\n                            <li className=\"nav-item active\">\r\n                                <a className=\"nav-link\" onClick={this.addNewVideoBox}>Add Box\r\n                                </a>\r\n                            </li>\r\n                            <li className=\"nav-item active\">\r\n                                <a className=\"nav-link\" onClick={this.removeLocalStorage}>Clear LS</a>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n                {/* container */}\r\n                <div className=\"container pt-5\">\r\n                    {this.state.children.length ==0 ? <h1>Click on Add Box</h1>:<React.Fragment></React.Fragment>}\r\n                    <div className=\"row\">\r\n                        {!load\r\n                            ? this.state.children\r\n                            : <p>getting data</p>}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}