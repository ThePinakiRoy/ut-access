{"version":3,"sources":["components/VideoBox.js","components/Header.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["VideoBox","props","console","log","className","id","count","onClick","removeBox","width","height","title","src","url","Header","addSelectedBox","alt","Main","state","data","loading","numBox","children","headerEl","arrNum","vidNum","addNewVideoBox","bind","items","JSONResult","result","Array","Math","ceil","length","fill","map","_","splice","arrN","floor","random","this","setState","randFlag","randomNum","randomHash","item","counter","push","key","number","newState","index","findIndex","a","rand2","i","rand","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4e41f22.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function VideoBox(props) {\r\n    console.log('cc')\r\n    return (\r\n\r\n        <div className=\"col-sm col-md-3 py-3\" id={props.id}>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                    <p className={\"badge badge-pill \" + props.className}>Count {props.count}\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-sm col-md-6 py-1\">\r\n                    <a className=\"btn btn-dark btn-sm \" onClick={() => props.removeBox(props.id)}>X</a>\r\n                </div>\r\n            </div>\r\n\r\n            <iframe\r\n            width=\"250\"\r\n            height=\"175\"\r\n            title={props.id}\r\n            src={\"https://www.youtube.com/embed/\"+props.url+\"?mute=1&vq=tiny\"}\r\n            // srcDoc={\"<style>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;width:100%;top:0;bottom:0;margin:auto}span{height:1.5em;text-align:center;font:48px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black}</style><a href=https://www.youtube.com/embed/\"+props.url+\"?mute=1><img src=https://img.youtube.com/vi/\"+props.url+\"/hqdefault.jpg alt='Video The Dark Knight Rises: What Went Wrong? – Wisecrack Edition'><span>▶</span></a>\"}\r\n            //  frameBorder=\"0\"\r\n            //  allowFullScreen\r\n            >\r\n\r\n            </iframe>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Header(props) {\r\n           \r\n    return (\r\n         \r\n                <div className=\"col-md-1 col-xl-1\" id ={props.url}>\r\n                <span className={\"badge badge-pill \" +props.className}>{props.count}</span>\r\n                   <a onClick={()=>props.addSelectedBox(props.url,props.count)}>\r\n                     <img src={\"https://img.youtube.com/vi/\"+props.url+\"/hqdefault.jpg\"} alt={props.url} height=\"75\" width=\"100\"/>                  \r\n                  </a>\r\n                </div>\r\n          \r\n    )\r\n}\r\n","import React, {Component} from 'react'\r\nimport VideoBox from '../components/VideoBox';\r\nimport Header from '../components/Header';\r\n// import JSONResult from '../data/test.json';\r\nimport JSONResult from '../data/initial.json';\r\n\r\nexport class Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            loading: true,\r\n            numBox: 12,\r\n            children: [],\r\n            headerEl: [],\r\n            arrNum: 0,\r\n            vidNum: 0\r\n        }\r\n        this.addNewVideoBox = this\r\n            .addNewVideoBox\r\n            .bind(this);\r\n        this.addSelectedBox = this\r\n            .addSelectedBox\r\n            .bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const items = JSONResult //… your array, filled with values\r\n        const n = 38 //tweak this to add more items per line\r\n\r\n        const result = new Array(Math.ceil(items.length / n))\r\n            .fill()\r\n            .map(_ => items.splice(0, n))\r\n        console.log(\"result \", result)\r\n        let arrN = Math.floor(Math.random() * result.length)\r\n        this.setState({data: result[arrN], loading: false, arrNum: arrN})\r\n\r\n    }\r\n\r\n    // Old componentDidMount() {     fetch('./data/initial.json', {         headers:\r\n    // {             'Content-Type': 'application/json',             'Accept':\r\n    // 'application/json'         }     }).then((response) =>\r\n    // response.json()).then((messages) => {         this.setState({data: messages,\r\n    // loading: false})         console.log(\"messages\", messages);     }); }\r\n    addNewVideoBox(randFlag) {\r\n        const {data} = this.state;\r\n        this.setState({\r\n            numBox: this.state.numBox + 1\r\n        });\r\n        const randomNum = Math.floor(Math.random() * data.length);\r\n        const randomHash = Math.floor(Math.random() * 25);\r\n        let item = data[randomNum];\r\n        if (item[\"count\"] < 4) {\r\n            let counter = randFlag\r\n                ? Math.floor(Math.random() * 3) + 1\r\n                : 1;\r\n            console.log(\"counter\", counter)\r\n            data[randomNum][\"count\"] = data[randomNum][\"count\"] + counter;\r\n            data[randomNum][\"id\"] = data[randomNum][\"count\"] + data[randomNum][\"url\"]\r\n            let className = 'badge-success'\r\n            if (data[randomNum][\"count\"] === 1) {\r\n                className = 'badge-success'\r\n            }\r\n            if (data[randomNum][\"count\"] === 2 || data[randomNum][\"count\"] === 3) {\r\n                className = 'badge-warning'\r\n            }\r\n            if (data[randomNum][\"count\"] === 4) {\r\n                className = 'badge-danger'\r\n            }\r\n            this\r\n                .state\r\n                .children\r\n                .push(<VideoBox\r\n                    key={item[\"url\"] + randomHash}\r\n                    number={randomNum}\r\n                    url={item[\"url\"]}\r\n                    id={data[randomNum][\"id\"]}\r\n                    count={item[\"count\"]}\r\n                    className={className}\r\n                    removeBox={this\r\n                    .removeBox\r\n                    .bind(this)}/>);\r\n            this.setState({\r\n                vidNum: this.state.vidNum + 1\r\n            });\r\n        }\r\n        //console.log('c', this.state.data)\r\n    }\r\n    addSelectedBox(url, count) {\r\n        console.log('addSelectedBox', url, count)\r\n        const randomHash = Math.floor(Math.random() * 105);\r\n        let className = 'badge-success'\r\n        if (count === 1) {\r\n            className = 'badge-success'\r\n        }\r\n        if (count === 2 || count === 3) {\r\n            className = 'badge-warning'\r\n        }\r\n        if (count === 4) {\r\n            className = 'badge-danger'\r\n        }\r\n        count = count + 1\r\n        this\r\n            .state\r\n            .children\r\n            .push(<VideoBox\r\n                key={url + randomHash}\r\n                number={randomHash}\r\n                url={url}\r\n                count={count}\r\n                id={url + randomHash}\r\n                className={className}\r\n                removeBox={this\r\n                .removeBox\r\n                .bind(this)}/>);\r\n    }\r\n\r\n    removeBox(id) {\r\n        // console.log('remove box ', id)\r\n        const newState = this.state;\r\n        const index = newState\r\n            .children\r\n            .findIndex(a => a.props.id === id);\r\n        //console.log(index)\r\n        if (index === -1) \r\n            return;\r\n        newState\r\n            .children\r\n            .splice(index, 1);\r\n\r\n        this.setState(newState)\r\n        //console.log('d', this.state.data)\r\n    }\r\n    populateHeader() {\r\n        console.log('in this.populateHeader();')\r\n        const rand2 = Math.floor(Math.random() * 100)\r\n        console.log(this.state.data.length)\r\n        for (let i = 0; i < this.state.data.length; i++) {\r\n            const rand = Math.floor(Math.random() * 100)\r\n\r\n            this\r\n                .state\r\n                .headerEl\r\n                .push(<Header\r\n                    key\r\n                    ={rand2 + this.state.data[i].url + rand}\r\n                    url\r\n                    ={this.state.data[i].url}\r\n                    count={this.state.data[i].count}\r\n                    addSelectedBox\r\n                    ={this.addSelectedBox}\r\n                    i={i}/>)\r\n        }\r\n        this\r\n            .state\r\n            .headerEl\r\n            .splice(this.state.data.length)\r\n    }\r\n    render() {\r\n        const {loading, arrNum, vidNum} = this.state;\r\n\r\n        //this.populateHeader();\r\n\r\n        return (\r\n            <div>\r\n                {/* <Header /> */}\r\n\r\n                <nav className=\"navbar navbar-expand-lg  navbar-dark bg-dark mb-5\">\r\n                    <a className=\"navbar-brand \">\r\n                        <span className=\"text-center\">\r\n                            ut-Access v-1.06 | x{arrNum}</span>\r\n                    </a>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarNav\"\r\n                        aria-controls=\"navbarNav\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                </nav>\r\n\r\n                {/* container */}\r\n\r\n                {/* <div className=\"container-fluid my-3 py-5 mx-3\" >\r\n                <a\r\n                                className=\"text-center btn btn-dark my-4 btn-lg btn-block\"\r\n                                onClick={() => this.toggleHeader}>Hide\r\n                            </a>\r\n                     <div className=\"row\" id=\"header\">\r\n                         {!loading\r\n                            ? this.state.headerEl\r\n                            : <p>getting data</p>}\r\n                     </div>\r\n                </div> */}\r\n\r\n                <div className=\"container-fluid my-5 py-5 mx-3\">\r\n                    <p className=\"text-center badge badge-pill badge-danger\">Current Video Played: {vidNum}</p>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <a\r\n                                className=\"text-center btn btn-dark my-4 btn-lg btn-block\"\r\n                                onClick={() => this.addNewVideoBox(false)}>Add Box\r\n                            </a>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <a\r\n                                className=\"text-center btn btn-info my-4 btn-lg btn-block\"\r\n                                onClick={() => this.addNewVideoBox(true)}>Add Random Box\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* {this.state.children.length ===0 ? <h1>Click on Add Box</h1>:<React.Fragment></React.Fragment>} */}\r\n                    <div className=\"row\">\r\n                        {!loading\r\n                            ? this.state.children\r\n                            : <p>getting data</p>}\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <a\r\n                                className=\"text-center btn btn-dark my-4 btn-lg btn-block\"\r\n                                onClick={() => this.addNewVideoBox(false)}>Add Box\r\n                            </a>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <a\r\n                                className=\"text-center btn btn-info my-4 btn-lg btn-block\"\r\n                                onClick={() => this.addNewVideoBox(true)}>Add Random Box\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"text-center badge badge-pill badge-danger\">Current Video Played: {vidNum}</p>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}